// Decompiled with JetBrains decompiler
// Type: midp.Define
// Assembly: sims3, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7B131356-9960-4428-AE45-C717550C1909
// Assembly location: E:\wamwo\Downloads\The Sims 3 1.0.0.0\sims3.dll

namespace midp
{
  internal class Define
  {
    public static int[] SIN = new int[256]
    {
      0,
      6,
      12,
      18,
      25,
      31,
      37,
      43,
      49,
      56,
      62,
      68,
      74,
      80,
      86,
      92,
      97,
      103,
      109,
      115,
      120,
      126,
      131,
      136,
      142,
      147,
      152,
      157,
      162,
      167,
      171,
      176,
      181,
      185,
      189,
      193,
      197,
      201,
      205,
      209,
      212,
      216,
      219,
      222,
      225,
      228,
      231,
      234,
      236,
      238,
      241,
      243,
      244,
      246,
      248,
      249,
      251,
      252,
      253,
      254,
      254,
      (int) byte.MaxValue,
      (int) byte.MaxValue,
      (int) byte.MaxValue,
      256,
      (int) byte.MaxValue,
      (int) byte.MaxValue,
      (int) byte.MaxValue,
      254,
      254,
      253,
      252,
      251,
      249,
      248,
      246,
      244,
      243,
      241,
      238,
      236,
      234,
      231,
      228,
      225,
      222,
      219,
      216,
      212,
      209,
      205,
      201,
      197,
      193,
      189,
      185,
      181,
      176,
      171,
      167,
      162,
      157,
      152,
      147,
      142,
      136,
      131,
      126,
      120,
      115,
      109,
      103,
      97,
      92,
      86,
      80,
      74,
      68,
      62,
      56,
      49,
      43,
      37,
      31,
      25,
      18,
      12,
      6,
      0,
      -6,
      -12,
      -18,
      -25,
      -31,
      -37,
      -43,
      -49,
      -56,
      -62,
      -68,
      -74,
      -80,
      -86,
      -92,
      -97,
      -103,
      -109,
      -115,
      -120,
      -126,
      -131,
      -136,
      -142,
      -147,
      -152,
      -157,
      -162,
      -167,
      -171,
      -176,
      -181,
      -185,
      -189,
      -193,
      -197,
      -201,
      -205,
      -209,
      -212,
      -216,
      -219,
      -222,
      -225,
      -228,
      -231,
      -234,
      -236,
      -238,
      -241,
      -243,
      -244,
      -246,
      -248,
      -249,
      -251,
      -252,
      -253,
      -254,
      -254,
      -255,
      -255,
      -255,
      -256,
      -255,
      -255,
      -255,
      -254,
      -254,
      -253,
      -252,
      -251,
      -249,
      -248,
      -246,
      -244,
      -243,
      -241,
      -238,
      -236,
      -234,
      -231,
      -228,
      -225,
      -222,
      -219,
      -216,
      -212,
      -209,
      -205,
      -201,
      -197,
      -193,
      -189,
      -185,
      -181,
      -176,
      -171,
      -167,
      -162,
      -157,
      -152,
      -147,
      -142,
      -136,
      -131,
      -126,
      -120,
      -115,
      -109,
      -103,
      -97,
      -92,
      -86,
      -80,
      -74,
      -68,
      -62,
      -56,
      -49,
      -43,
      -37,
      -31,
      -25,
      -18,
      -12,
      -6
    };
    public static int[] TAN = new int[256]
    {
      0,
      6,
      12,
      18,
      25,
      31,
      37,
      43,
      49,
      57,
      64,
      70,
      77,
      84,
      91,
      98,
      105,
      112,
      120,
      129,
      136,
      145,
      153,
      161,
      171,
      180,
      189,
      199,
      210,
      221,
      231,
      243,
      256,
      269,
      282,
      295,
      311,
      327,
      345,
      363,
      382,
      406,
      427,
      451,
      480,
      507,
      542,
      581,
      622,
      662,
      717,
      777,
      844,
      926,
      1024,
      1138,
      1311,
      1500,
      1750,
      2097,
      2600,
      3626,
      5440,
      10880,
      0,
      -10880,
      -5440,
      -3626,
      -2600,
      -2097,
      -1750,
      -1500,
      -1311,
      -1138,
      -1024,
      -926,
      -844,
      -777,
      -717,
      -662,
      -622,
      -581,
      -542,
      -507,
      -480,
      -451,
      -427,
      -406,
      -382,
      -363,
      -345,
      -327,
      -311,
      -295,
      -282,
      -269,
      -256,
      -243,
      -231,
      -221,
      -210,
      -199,
      -189,
      -180,
      -171,
      -161,
      -153,
      -145,
      -136,
      -129,
      -120,
      -112,
      -105,
      -98,
      -91,
      -84,
      -77,
      -70,
      -64,
      -57,
      -49,
      -43,
      -37,
      -31,
      -25,
      -18,
      -12,
      -6,
      0,
      6,
      12,
      18,
      25,
      31,
      37,
      43,
      49,
      57,
      64,
      70,
      77,
      84,
      91,
      98,
      105,
      112,
      120,
      129,
      136,
      145,
      153,
      161,
      171,
      180,
      189,
      199,
      210,
      221,
      231,
      243,
      256,
      269,
      282,
      295,
      311,
      327,
      345,
      363,
      382,
      406,
      427,
      451,
      480,
      507,
      542,
      581,
      622,
      662,
      717,
      777,
      844,
      926,
      1024,
      1138,
      1311,
      1500,
      1750,
      2097,
      2600,
      3626,
      5440,
      10880,
      0,
      -10880,
      -5440,
      -3626,
      -2600,
      -2097,
      -1750,
      -1500,
      -1311,
      -1138,
      -1024,
      -926,
      -844,
      -777,
      -717,
      -662,
      -622,
      -581,
      -542,
      -507,
      -480,
      -451,
      -427,
      -406,
      -382,
      -363,
      -345,
      -327,
      -311,
      -295,
      -282,
      -269,
      -256,
      -243,
      -231,
      -221,
      -210,
      -199,
      -189,
      -180,
      -171,
      -161,
      -153,
      -145,
      -136,
      -129,
      -120,
      -112,
      -105,
      -98,
      -91,
      -84,
      -77,
      -70,
      -64,
      -57,
      -49,
      -43,
      -37,
      -31,
      -25,
      -18,
      -12,
      -6
    };
    public const int FP_SHIFT = 8;

    public static int fsin(byte x)
    {
      return Define.SIN[(int) x];
    }

    public static int fcos(byte x)
    {
      return Define.fsin((byte) (64U - (uint) x));
    }

    public static int ftan(byte x)
    {
      return Define.TAN[(int) x];
    }

    public static int INT_TO_FIX(int n)
    {
      return n << 8;
    }

    public static int FIX_TO_INT(int n)
    {
      return n >> 8;
    }

    public static int FIX_MUL(int a, int b)
    {
      return a * b >> 8;
    }

    public static int FIX_DIV(int n, int d)
    {
      return (n << 8) / d;
    }

    public static int ROUND(int n)
    {
      return (n + (n >= 0 ? Define.INT_TO_FIX(1) / 2 : -Define.INT_TO_FIX(1) / 2)) / Define.INT_TO_FIX(1);
    }

    public static int CONSTRAIN(int val, int min, int max)
    {
      if (val < min)
        return min;
      return val <= max ? val : max;
    }
  }
}
